package com.java.movieticketingsystem.auth.helper;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Getter
@Component
public class JwtService {

    @Value("${jwt.secret}")
    private String jwtSecret;

    @Value("${jwt.access-token-expiration}")
    private long accessTokenExpiration;

    @Value("${jwt.refresh-token-expiration}")
    private long refreshTokenExpiration;

    /**
     * Generate token with given username
     *
     * @param username The username i.e. email of the signing user.
     * @return The access token for the authenticated user.
     */
    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username, accessTokenExpiration);
    }

    /**
     * Generate refresh token with given username
     *
     * @param username The username i.e. email of the signing user.
     * @return The refresh token for the authenticated user.
     */
    public String generateRefreshToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username, refreshTokenExpiration);
    }

    /**
     * Create a JWT token with specified claims, subject, and expiration
     *
     * @param claims     The attributes of the user in the database
     * @param username   The username i.e. email of the signing user.
     * @param expiration The token expiration time in milliseconds
     * @return The token generated by the jwt hashing algorithm.
     */
    private String createToken(Map<String, Object> claims, String username, long expiration) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    /**
     * Get the signing key for JWT token
     *
     * @return The signing key
     */
    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    /**
     * Extract the username from the token
     *
     * @param token The token supplied
     * @return The username i.e. email of the authenticated token.
     */
    public String extractUsername(String token) {
        try {
            return extractClaim(token, Claims::getSubject);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * Extract the expiration date from the token
     *
     * @param token The token supplied
     * @return The expiration date for the token.
     */
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    /**
     * Extract a claim from the token
     *
     * @param token          The token supplied
     * @param claimsResolver The claim resolver used to resolve claims.
     * @return The claim type resolved and its value.
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Extract all claims from the token
     *
     * @param token The token supplied
     * @return The claims of authenticated user.
     */
    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * Checks if the token is expired
     *
     * @param token The token supplied
     * @return The flag indicating whether the token is expired or not.
     */
    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    /**
     * Validate the token against user details and expiration
     *
     * @param token       The token supplied
     * @param userDetails The details of the user.
     * @return The flag indicating whether the token is valid or not.
     */
    public Boolean validateToken(String token, UserDetails userDetails) {
        try {
            final String username = extractUsername(token);
            return (username != null && 
                   username.equals(userDetails.getUsername()) && 
                   !isTokenExpired(token));
        } catch (Exception e) {
            return false;
        }
    }

}
